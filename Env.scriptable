{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "brown",
    "glyph" : "terminal"
  },
  "name" : "Env",
  "script" : "\/**\n * Author: GideonSenku\n * Github: https:\/\/github.com\/GideonSenku\n *\/\n\n\nconst request = new Request('')\nconst dict = FileManager.iCloud().documentsDirectory()\nconst defaultHeaders = {\n  \"Accept\": \"application\/json\",\n  \"Content-Type\": \"application\/json\"\n}\n\nconst get = async ({\n  url,\n  headers = {}\n}) => {\n  request.url = url\n  request.method = 'GET'\n  request.headers = {\n    ...headers,\n    ...defaultHeaders\n  }\n  return await request.loadJSON()\n}\n\nconst getStr = async ({\n  url,\n  headers = {}\n}, callback = () => {}) => {\n  request.url = url\n  request.method = 'GET'\n  request.headers = {\n    ...headers,\n    ...defaultHeaders\n  }\n  const res = await request.loadString()\n  callback(request.response)\n  return res\n}\n\nconst post = async ({\n  url,\n  body,\n  headers = {}\n}) => {\n  request.url = url\n  request.body = body ? JSON.stringify(body) : `{}`\n  request.method = 'POST'\n  request.headers = {\n    ...headers,\n    ...defaultHeaders\n  }\n  return await request.loadJSON()\n}\n\nconst getFile = async ({\n  moduleName,\n  url\n}) => {\n  log(`开始下载文件: 🌝 ${moduleName}`)\n  const header = `\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: deep-gray; icon-glyph: file-code;\\n`;\n  const content = await getStr({\n    url\n  })\n  const fileHeader = content.includes('icon-color') ? `` : header\n  writeFile(`${moduleName}`, `${fileHeader}${content}`)\n  log(`文件下载完成: 🌚 ${moduleName}`)\n}\n\nconst require = async ({\n  moduleName,\n  url = '',\n  forceDownload = false\n}) => {\n  if (isFileExists(moduleName) && !forceDownload) {\n    log(`导入模块: 🪐${moduleName}`)\n    return importModule(moduleName)\n  } else {\n    await getFile({\n      moduleName,\n      url\n    })\n    log(`导入模块: 🪐${moduleName}`)\n    return importModule(moduleName)\n  }\n}\n\nconst writeFile = (fileName, content) => {\n  let file = initFile(fileName)\n  const filePath = `${dict}\/${file}`\n  FileManager.iCloud().writeString(filePath, content)\n  return true\n}\n\nconst isFileExists = (fileName) => {\n  let file = initFile(fileName)\n  return FileManager.iCloud().fileExists(`${dict}\/${file}`)\n}\n\nconst initFile = (fileName) => {\n  const hasSuffix = fileName.lastIndexOf('.') + 1\n  return !hasSuffix ? `${fileName}.js` : fileName\n}\n\nconst readFile = (fileName) => {\n  const file = initFile(fileName)\n  return FileManager.iCloud().readString(`${dict}\/${file}`)\n}\n\nconst msg = function(title, message, btnMes = 'Cancel') {\n  if (!config.runsInWidget) {\n    const alert = new Alert()\n    alert.title = title\n    alert.message = message\n    alert.addAction(btnMes)\n    alert.present()\n  }\n}\n\nmodule.exports = {\n  dict,\n  get,\n  getStr,\n  post,\n  getFile,\n  require,\n  writeFile,\n  isFileExists,\n  initFile,\n  readFile,\n  msg\n}",
  "share_sheet_inputs" : [

  ]
}